// <auto-generated />
using System;
using CustomerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerApi.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    [Migration("20250504161348_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CustomerApi.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Balance = 1000.00m,
                            CreationTimestamp = new DateTime(2025, 5, 4, 16, 13, 48, 319, DateTimeKind.Utc).AddTicks(1510),
                            CustomerId = 1,
                            Status = "Active",
                            UpdatedTimestamp = new DateTime(2025, 5, 4, 16, 13, 48, 319, DateTimeKind.Utc).AddTicks(1510)
                        },
                        new
                        {
                            AccountId = 2,
                            Balance = 500.00m,
                            CreationTimestamp = new DateTime(2025, 5, 4, 16, 13, 48, 319, DateTimeKind.Utc).AddTicks(1513),
                            CustomerId = 2,
                            Status = "Active",
                            UpdatedTimestamp = new DateTime(2025, 5, 4, 16, 13, 48, 319, DateTimeKind.Utc).AddTicks(1513)
                        });
                });

            modelBuilder.Entity("CustomerApi.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            FirstName = "Lowe",
                            LastName = "Eriksson",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            CustomerId = 2,
                            FirstName = "Ewelina",
                            LastName = "Wojtkoviak",
                            PhoneNumber = "0987654321"
                        });
                });

            modelBuilder.Entity("CustomerApi.Models.Account", b =>
                {
                    b.HasOne("CustomerApi.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerApi.Models.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
